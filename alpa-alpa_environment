#!/bin/bash

# Set up the alpa data transfer environment
# This script is used by other scripts to preset values from a common source.
# Usage: (in another script) ". $HOME/bin/alpa_environment"

export PGPPASS=seavvdmzftp
export pgp_remote_signature="ALPA"
export BATCHMODE=yes          # Turn on non-prompted PGP encrypting
export ftp_host=ftp.alpa.org
export outbound_dir=$HOME/outbound
export outbound_archive=${outbound_dir}.archive
export inbound_dir=$HOME/inbound
export inbound_archive=${inbound_dir}.archive
export hcmdir_in=/home/hcmprod/inbound/alpaico
export hcmdir_out=/home/hcmprod/outbound/alpaico
export alert_recipient=dean.liebrich@alaskaair.com
export datestamp=`/bin/date +%b%d%Y.%H%M`
export info_to="dean.liebricha@alaskaair.com"
export logfile=$HOME/transfer_log
export FileAge=20
export ops=/opt/local/ops_scripts

. /opt/local/ops_scripts/function_lib

function outproc {

cd $outbound_dir

echo -e "get $datafile from $hcmdir_out"
cp $hcmdir_out/$datafile $outbound_dir

securezip $datafile outbound

echo $PGPPASS | gpg --passphrase-fd 0 --batch -v --sign -r "$pgp_remote_signature" --output $pgpfile --encrypt $datafile >gpg_transcript.$$

result=$?

	if [ $result -ne 0 ]; then
	echo "alpa data file encryption failure, contact Production Services."
	cat gpg_transcript.$$
	rm -f gpg_transcript.$$
  	exit 8
	fi

rm -f gpg_transcript.$$

ftp_vendor_chk $ftp_host 

ftp_vendor $ftp_host $pgpfile $pgpfile bin

echo -e "\nRemove archived files older than $FileAge days"
find $outbound_archive -mtime +$FileAge -print |
	while read FILE1
	do
	echo "removing file $FILE1"
	rm -f $FILE1
	done

data_records=`wc -l $datafile | awk '{print $1}'`
echo -e "\n$datestamp: there were $data_records records sent to alpa" 

echo -e "\nRemove temp files"
rm -f $hcmdir/$tagfile $hcmdir/$datafile
echo -e "\nMove encrypted file $pgpfile to the archive directory as $pgpfile_$datestamp"

rm $datafile $tagfile

}

function inproc {

cd $inbound_dir

echo $PGPPASS | gpg --passphrase-fd 0 --batch -v --output $localfile --decrypt $remotefile >gpg_transcript.$$

	result=$?

	if [ $result -ne 0 ]; then
	echo "`whoami` data file encryption failure, contact Production Services."
	cat gpg_transcript.$$
	rm -f gpg_transcript.$$
  	exit 8
	fi

rm -fv gpg_transcript.$$

echo -e "\nMove $localfile to $hcmdir_in"
mv -v $localfile $hcmdir_in

	result=$?

	if [ $result -ne 0 ]; then
	echo -e "\nMove $localfile to $hcmdir_in failed, contact Production Services.\n"
  	exit 8
	fi

mv -v $tagfile $hcmdir_in

	result=$?

	if [ $result -ne 0 ]; then
	echo -e "\nMove $tagfile to $hcmdir_in failed, contact Production Services.\n"
  	exit 8
	fi

ls -l

echo -e "\nMove encrypted file $remotefile to the archive directory as $remotefile.$datestamp"
mv $remotefile $inbound_archive/$remotefile.$datestamp

archive_clean $inbound_archive $remotefile $FileAge

}
