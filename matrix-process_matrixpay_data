#!/bin/bash

export PGPPASS=seavvdmzftp
export pgp_remote_signature="matrixpay"
export BATCHMODE=yes          # Turn on non-prompted PGP encrypting
export ftp_host=ftp.matrixpay.com
export sftp_host=aalftp@ftp.matrixcos.com
export outbound_dir=$HOME/outbound
export outbound_archive=${outbound_dir}.archive
export inbound_dir=$HOME/inbound
export inbound_archive=${inbound_dir}.archive
export hcmdir_in=/home/hcmprod/inbound/matrix
export hcmdir_out=/home/hcmprod/outbound/matrix
export datestamp=`/bin/date +%b%d%Y.%H%M`
export filedate=`/bin/date +%Y%m%d`
export data_file=PSF_28542.upd
export tagfile=PSF_28542.tag
export pgpfile=PSF_28542_${filedate}_matrixpay.upd.pgp
export tagin=employee.tag
export errors_to="TS.Production.Operations@alaskaair.com"
export FileAge=20
export ops=/opt/local/ops_scripts

. /opt/local/ops_scripts/function_lib

  direction=$1

#make sure direction parm was passed in as first arg
        if [ -z $direction ]; then
echo -e "\n     Missing direction parm.
        proper syntax is: process_matrix_data direction where
        direction equals in or out\n"
        exit 4
        fi

function outproc {

cd $outbound_dir

echo -e "get $data_file from $hcmdir_out"
cp $hcmdir_out/$data_file $outbound_dir

echo -e "\nencrypt $data_file"
echo $PGPPASS | gpg --passphrase-fd 0 --batch -v -r "$pgp_remote_signature" --output $pgpfile --encrypt $data_file >gpg_transcript.$$

result=$?

	if [ $result -ne 0 ]; then
	echo "matrixpay data file encryption failure, contact Systems Operations."
	cat gpg_transcript.$$
	rm -f gpg_transcript.$$
  	exit 8
	fi

rm -f gpg_transcript.$$

securezip $data_file outbound

echo -e "\nput $pgpfile to $sftp_host"
	sftp -v $sftp_host <<PUTDATA >ftp_results.$$
        cd in
	put $pgpfile
	dir
	quit
PUTDATA
	result=$?

	if [ $result -ne 0 ]; then
	echo "FTP put of $pgpfile to matrix failed"
	cat ftp_results.$$
	rm -v ftp_results.$$
	exit 4
	fi

cat ftp_results.$$
rm -fv ftp_results.$$

archive_clean $outbound_archive .upd $FileAge

data_records=`wc -l $data_file | awk '{print $1}'`
echo -e "\n$datestamp: there were $data_records records sent to matrixpay" 

echo -e "\nRemove temp files"
rm -f $data_file  $pgpfile $hcmdir_out/$data_file $hcmdir_out/$tagfile

}

function inproc {

cd $inbound_dir

	ls -1 *.csv | while read File1
	do

echo -e "\nprocessing matrixpay $File1"

securezip $File1 inbound

echo -e "\nMove $File1 to $hcmdir_in"

mv -v $File1 $hcmdir_in/$File1
scp $hcmdir_in/$File1 seavvftp:$hcmdir_in

touch $hcmdir_in/$tagin
scp $hcmdir_in/$tagin seavvftp:$hcmdir_in

	result=$?

	if [ $result -ne 0 -o -f $File1 ]; then
	echo -e "\nMove $File1 to $hcmdir_in failed, contact Production Services.\n"
  	exit 8
	fi

echo -e "remove $File1 $File1 from `hostname`"
rm -fv $hcmdir_in/$File1 $hcmdir_in/$tagin

	done

archive_clean $inbound_archive *.csv $FileAge

}

case "$direction" in
	
	matrixpayground_in)
export data_file=matrixpayground*.txt
export tagfile=matrixpayground*.tag
	
echo -e "\nBegin processing for `whoami` inbound processing"
inproc
echo -e "\nEnd of `whoami` inbound processing"
        ;;
	
	matrixpayflight_in)
export data_file=matrixpayflight*.txt
export tagfile=matrixpayflight*.tag

echo -e "\nBegin processing for `whoami` inbound processing"
inproc
echo -e "\nEnd of `whoami` inbound processing"
        ;;

esac
