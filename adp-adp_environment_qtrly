#!/bin/bash

# Set up the ADP data transfer environment
# This script is used by other scripts to preset values from a common source.
# Usage: (in another script) ". $HOME/bin/adp_environment"

export PGPPASS=seavvdmzftp
export pgp_remote_signature="ADPTAX"
export outbound_dir=$HOME/outbound
export outbound_archive=${outbound_dir}.archive
export inbound_dir=$HOME/inbound
export inbound_archive=${inbound_dir}.archive
export done_dir=$HOME/done
export hcmdir_in=/home/hcmprod/inbound/adp
export hcmdir_out=/home/hcmprod/outbound/adp
export datestamp=`/bin/date +%b%d%Y.%H%M`
export errors_to="systems.management@alaskaair.com"
export wc_mailto="pc.hcm.production.system.msgs@alaskaair.com"
export FileAge=20
export ops=/opt/local/ops_scripts

. /opt/local/ops_scripts/function_lib

function inbound {

cd $inbound_dir

securezip `ls -1 $filepref` inbound

echo -e "\ndecrypting file `ls -1 $filepref`"

echo $PGPPASS | gpg --passphrase-fd 0 --batch -v --output $datafile --decrypt $filepref >gpg_transcript.$$

	result=$?

	if [ $result -ne 0 -o ! -s $datafile ]; then
	echo "`whoami` $filepref decryption failure, contact Production Services."
	cat gpg_transcript.$$
	rm -f gpg_transcript.$$
  	exit 8
	fi

records=`wc -l $datafile | awk '{print $1}'`

echo -e "\ncopy $datafile with $records records to $hcmdir_in"
cp $datafile $hcmdir_in

	result=$?

	if [ $result -ne 0 ]; then
	echo -e "\nCopy $datefile to $hcmdir_in failed, contact Production Services.\n"
  	exit 8
	fi

echo -e "\nCreate $tagfile"
touch $hcmdir_in/$tagfile 

rm -f gpg_transcript.$$ $datafile $filepref

archive_clean $inbound_archive $filepref $FileAge

}

function outbound {

cd $outbound_dir

echo -e "\nprocessing ADP outbound file $filename"

securezip $filename outbound
records=`wc -l $filename | awk '{print $1}'`

echo -e "\nencrypting file $filename with $records records"

echo $PGPPASS | gpg --passphrase-fd 0 --batch -v --armor -r "$pgp_remote_signature" --output $pgpfile --encrypt $filename >pgp_transcript.$$
	
	result=$?

	if [ ! -s $pgpfile -o $result -ne 0 ]; then
	echo -e "\n$datafile encryption failure, contact Production Analyst" 
	cat pgp_transcript.$$
	rm pgp_transcript.$$
	exit 4
	fi

rm -fv $filename pgp_transcript.$$
rm -fv $hcmdir_out/$filename

find $outbound_archive/*.zip -mtime +$FileAge | xargs rm -fv
}

