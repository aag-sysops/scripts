#!/bin/bash

# Set up the Airfacts data transfer environment
# This script is used by other scripts to preset values from a common source.

export PGPPASS=seavvdmzftp
#export pgp_remote_sig="AS2015DEK"
export pgp_remote_sig="AS2016DEK"
#export pgp_remote_sig="AS2014DEK"
#export pgp_remote_sig="AS2013DEK"
#export ftp_exthost=ftp.airfacts.com
export ftp_host=alaskaair@216.127.152.39
export ftp_localhost=asprodftp
export inbound_dir=$HOME/inbound
export inbound_archive=${inbound_dir}.archive
export outbound_dir=$HOME/outbound
export outbound_archive=${outbound_dir}.archive
export ops=/opt/local/ops_scripts
export filedate=`date +%Y%m%d`
export ext=".dat"
export tagext=".tag"
export datestamp=`date +%Y%m%d.%H%M`
export wavdatestamp=`date +%Y%m%d_%H%M`
export FileAge=40
export ewFileAge=30

. /opt/local/ops_scripts/function_lib

function ewout {

cd $outbound_dir

ftp_vendor_chk $ftp_localhost

echo -e "\nmove any previous *$filepref* files to $outbound_archive"
mv -fv *$filepref* $outbound_archive

echo -e "\ndelete any previously processed files"
	ftp -v -i $ftp_localhost <<DEL
	cd $lz
	dir
	mdel *$filepref*.done
	bye
DEL

	ftp -v -i $ftp_localhost <<GET >ftp_results.$$
	cd $lz
	dir
	mget *$filepref*
	bye
GET
	result=$?
	
export count=`ls -1 *${filepref}* | wc | awk '{print $1}'`

	if [ $result -ne 0 ]; then
echo -e "\nFailed to retrieve $filepref files\n"
	cat ftp_results.$$
	rm -fv ftp_results.$$
	echo "\ncontents of outbound dir:\n"
	ls -l
	exit 4
	fi

cat ftp_results.$$
rm -fv ftp_results.$$

	if [ $count -lt $filecnt ]; then
echo -e "\nNo files to process... exiting\n"
	exit 0
	fi


echo -e "\n$count files were retrieved from $ftp_localhost"

	ls -1 *$filepref* | while read FILE1
		do
echo -e "\nrename $FILE1 to $FILE1.done on $ftp_host"
        sftp -v $ftp_host <<RENAME >ftp_results.$$
	cd $lz
        ren $FILE1 $FILE1.done
        bye
RENAME

	if [ $result -ne 0 ]; then
echo -e "\nFailed to rename file $FILE1\n"
	cat ftp_results.$$
	rm -fv ftp_results.$$
	exit 4
	fi

rm -fv ftp_results.$$

echo -e "\ncreate done file $FILE1.done"
touch $FILE1.done

		done

archive_clean $outbound_archive $filepref $ewFileAge

}


function mpout {

cd $outbound_dir

echo -e "\nmove any previous $filepref files to $outbound_archive"
mv -fv $filepref* $outbound_archive

ftp_vendor_chk $ftp_localhost

	ftp -v -i $ftp_localhost <<EOF >ftp_results.$$
	cd "$lz"
	dir
	mget $filepref*
	bye
EOF
	result=$?
	
export count=`ls -1 ${filepref}* | wc | awk '{print $1}'`

	if [ $result -ne 0 -o $count -lt $filecnt ]; then
echo -e "\nFailed to retrieve $filepref files\n"
	cat ftp_results.$$
	rm -fv ftp_results.$$
	echo "\ncontents of outbound dir:\n"
	ls -l
	exit 4
	fi

cat ftp_results.$$
rm -fv ftp_results.$$

	ls -1 ${filepref}* | grep -v ${filepref}_Done | while read FILE1
		
		do
export gpgfile=${FILE1}.asc
export tagfile=${gpgfile}.done

echo -e "\n######## begin processing file $FILE1 ########"

echo -e "\nencrypt file $FILE1 as $FILE1.asc"
echo $PGPPASS | gpg --passphrase-fd 0 --batch -v --armor -r "$pgp_remote_sig" --output $gpgfile --encrypt $FILE1

	if [ ! -s  ${FILE1}.asc ]; then
	echo -e "\nencryption of $FILE1 failed\n"
	exit 4
	fi

echo -e "\nrename tag file to airfacts standard"
touch $tagfile

ftp_delete $ftp_localhost $FILE1 "cd mpprod/outbound" "del $tagfile"

echo -e "\nremove file $FILE1"
rm -fv $FILE1 ${filepref}_Done*

echo -e "######## processing complete for file $FILE1 ########\n"
	done

archive_clean $outbound_archive $filepref $FileAge

}

function outproc {

cd $outbound_dir

ftp_vendor_chk $ftp_localhost

ftp_vendor_get $ftp_localhost $filename$ext $filename$filedate$ext "cd sis/TravelAgency/outbound/Airfacts" 

ftp_file $sftp_host $filename$filedate$ext $filename$filedate$ext "cd incoming"

echo -e "\nzip & copy $filename$filedate$ext to $outbound_archive/$filename$filedate$ext"
gzip < $filename$filedate$ext > $outbound_archive/$filename$filedate$ext.gz

echo -e "\nclean up the outbound dir"
rm $filename$filedate$ext

ftp_delete $ftp_localhost $filename$tagext "cd sis/TravelAgency/outbound/Airfacts" "ren $filename$ext $filename$filedate.SENT$ext" 

archive_clean $outbound_archive $filename $FileAge

}

function waiverout {

cd $outbound_dir

echo "encrypted files ${filename}*.asc in $outbound_dir:"
ls -1 ${filename}*.asc

echo -e "\nmove any previous $filename files to $outbound_archive"
mv -fv ${filename}* $outbound_archive

#ftp_vendor_chk $ftp_host

ftp_vendor_get $sftp_host ${filename}$ext ${filename}$ext "cd waiver"

records=`wc -l ${filename}$ext | awk '{print $1}'`
echo -e "\nthere are $records lines in file ${filename}$ext"

echo -e "\nencrypt file ${filename}$ext as ${filename}_${wavdatestamp}$ext.asc"
echo $PGPPASS | gpg --passphrase-fd 0 --batch -v --armor -r "$pgp_remote_sig" --output ${filename}_${wavdatestamp}$ext.asc --encrypt ${filename}$ext

	if [ ! -s  ${filename}_${wavdatestamp}$ext.asc ]; then
	echo -e "\nencryption of ${filename}$ext as ${filename}_${wavdatestamp}$ext.asc failed\n"
	exit 4
	fi

echo -e "\ncreate tag file ${filename}_${wavdatestamp}$ext.asc.done"
touch ${filename}_${wavdatestamp}$ext.asc.done

securezip $filename$ext outbound 

ftp_delete $sftp_host ${filename}${ext} "cd waiver" "del ${filename}${ext}.done"
rm ${filename}$ext

echo "the following encrypted files ${filename}*.asc are in $outbound_dir:"
ls -l ${filename}*.asc

#Use the archive_clean function to remove any waiver2airfacts files older than 100 days.
archive_clean $outbound_archive $filename $FileAge
archive_clean $outbound_dir $filename $FileAge

}

function test_rename {

echo -e "\nput test prefix on file ${filename}_${wavdatestamp}$ext.asc"
mv ${filename}_${wavdatestamp}$ext.asc test_${filename}_${wavdatestamp}$ext.asc

}

