#!/bin/bash

# Set up the MPCRUISES data transfer environment
# This script is used by other scripts to preset values from a common source.
# Usage: (in another script) ". $HOME/bin/mpcruise_environment"


set -x

export ftp_local_host=asprodftp
export lz=mpprod
export inbound_dir=$HOME/inbound
export inbound_archive=${inbound_dir}.archive
export outbound_dir=$HOME/outbound
export outbound_archive=${outbound_dir}.archive
export alert_recipient=production.services@alaskaair.com
export datestamp=`/bin/date +%b%d%Y.%H%M`
export file_prefix=WLMILEAGEPLNCRUISEPIT
export out_file_prefix=WLMILEAGEPLNCRUISEPIT
export local_file=${file_prefix}.txt
export info_to="production.services@alaskaair.com"
export errors_to="eps@alaskaair.com,production.services@alaskaair.com"
export logfile=$HOME/transfer_log
export last_file_received=$HOME/last_file_received
export MAILLST="ftp.partner.alerts@alaskaair.com"
export nofiledate=`/bin/date "+%A, %D"`
FileAge=20

. /opt/local/ops_scripts/function_lib

function inbound {

cd $inbound_dir

	if [ ! -s $data_file ]; then
	MSG="No MP Cruises file to process for $nofiledate"
	echo -e "\n$MSG"
	echo $MSG | Mail -s "MP Cruises feed" $MAILLST
	exit 0
	fi

records=`wc $data_file | awk '{print $2}'`

echo -e "\nMPCRUISES file $data_file ($records records) received at `date`"

# rename local filel for SOLAR conv.
mv $data_file $local_file

echo -e "\nzip file $local_file to $inbound_archive/$local_file.$datestamp"
gzip <$local_file >$inbound_archive/$local_file.$datestamp.gz

ftp_check $ftp_local_host
ftp_solar_in $ftp_local_host $local_file

echo -e "\nclean up inbound directory"
rm -f ftp_results.$$ $local_file

archive_clean $inbound_archive $local_file $FileAge

}

function outbound {

cd $outbound_dir

# Is there a previous handback file in outbound dir?
# If so, datestamp and send email notification to anyone who cares 
	if [ -s $out_file ]; then
	mv $out_file $out_file.$datestamp
	fi

ftp_check $ftp_local_host
ftp_solar_out $ftp_local_host $file_prefix

export solar_file=`ls -1 $file_prefix*`
echo -e "\nprocessing outbound file $solar_file"

securezip $solar_file outbound

echo -e "\ncopy $solar_file to $data_file"
cp $solar_file $out_file

ftp_delete $ftp_local_host $solar_file "cd mpprod/outbound/handback"

echo -e "remove local files in outbound"
rm -f file $solar_file pgp_transcript.$$

archive_clean $outbound_archive $file_prefix $FileAge

}
