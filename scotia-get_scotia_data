#!/bin/bash

# Process data from scotia, then upload to seavvfile1/ftpprod

# Set the environment variables
. $HOME/bin/scotia_environment

rm ~/.netrc
ln -s ~/.netrc.brasin ~/.netrc

cd $inbound_dir

	if [ -s $scotia_pgp_file ]; then
	echo -e "\nprevious pgp encryption error on $scotia_pgp_file"
	echo -e "notify EPS\n"
	ls -l
	exit 4
	fi

	echo -e "\ngetting file $scotia_new_file from $ftp_host"
	ftp -v $ftp_host <<GETDATA >ftp_results.$$
	bin
	get $scotia_new_file
	quit  
GETDATA

result=$?
succftp=`grep -c "Transfer complete" ftp_results.$$`

	if [ $succftp -ne 1 -o $result -ne 0 ]; then
	echo -e "\nFTP get of $scotia_new_file from scotia failed."
	echo -e "Contact Production Services or EPS\n"
	cat ftp_results.$$
	rm ftp_results.$$
	exit 4
	fi

cat ftp_results.$$
rm -f ftp_results.$$

echo -e "\nchange file extension to .pgp"
mv $scotia_new_file $scotia_pgp_file

echo "contents of inbound dir:"
dir

echo -e "decrypt $scotia_pgp_file"
echo $PGPPASS | gpg --passphrase-fd 0 --batch --output $scotia_file --decrypt $scotia_pgp_file    
	result=$?

	if [ $result -ne 0 ]; then
	echo "${program}: inbound results file decrypt problem.  Call Ops Analyst."
        exit 8
	fi

records=`wc $scotia_file | awk '{print $2}'`

echo -e "\n$scotia_file file ($records records) received at `date`"
echo -e "\nmove $scotia_pgp_file to archive directory and timestamp"
mv $scotia_pgp_file $inbound_archive/$scotia_pgp_file.$datestamp

echo -e "\nFTP $scotia_file to asprodftp"
        ftp -v $ftp_local_host <<FTPDATA >ftp_results.$$
        cd br_chesapeake/treasury
	ascii
	put $scotia_file BNSP.RPT
        quit
FTPDATA

result=$?
succftp=`grep -c "Transfer complete" ftp_results.$$`

	if [ $succftp -ne 1 -o $result -ne 0 ]; then
	echo -e "\nFTP of $scotia_file to asprodftp failed."
	echo -e "Contact Production Services or EPS\n"
	cat ftp_results.$$
	rm ftp_results.$$
	exit 4
	fi

rm -f ftp_results.$$

echo "remove temp files"
rm -f $scotia_file $ftp_results* 

echo "removing archived files older than $FileAge days"
	find $inbound_archive/ede* -mtime +$FileAge -print |
	while read FILE1
	do
	echo "removing file $FILE1"
	rm -f $FILE1
	done
