#!/bin/bash

# Set up the schwab data transfer environment
# This script is used by other scripts to preset values from a common source.
# Usage: (in another script) ". $HOME/bin/schwab_environment"
 
export PGPPASS=seavvdmzftp
#export pgp_remote_signature="Schwab-AKA-SEA"
export pgp_remote_signature="Schwab-AKA-SEA-dh"
#export ftp_test_host=transfer-ftp-test.schwab.com
export ftp_host=transfer-ftp.schwab.com
export outbound_dir=$HOME/outbound
export outbound_archive=${outbound_dir}.archive
export inbound_dir=$HOME/inbound
export inbound_archive=${inbound_dir}.archive
export hcmdir_in=/home/hcmprod/inbound/schwab
export hcmdir_out=/home/hcmprod/outbound/schwab
export alert_recipient=joanne.gies@alaskaair.com
export datestamp=`/bin/date +%b%d%Y.%H%M`
export datestamp_rem=`/bin/date +%m%d%Y`
export info_to="joanne.gies@alaskaair.com"
export logfile=$HOME/transfer_log
export FileAge=20
export ops=/opt/local/ops_scripts

. /opt/local/ops_scripts/function_lib

function outproc {

cd $hcmdir_out

export data_file=`ls -1 $data_file_pref*.txt`
export outfile={data_file}.pgp

cd $outbound_dir

cp $hcmdir_out/$data_file $outbound_dir

echo -e "\nprocessing $whoami $data_file"

securezip $data_file outbound

data_records=`wc -l $data_file | awk '{print $1}'`

echo -e "\n$datestamp: there were $data_records records sent to schwab" 

echo -e "\nencrypt $data_file"
echo $PGPPASS | gpg --passphrase-fd 0 --batch -v -r "$pgp_remote_signature" --output $outfile --encrypt $data_file >gpg_transcript.$$

	result=$?

	if [ $result -ne 0 ]; then
	echo "Schwab data file encryption failure, contact Production Services."
	cat gpg_transcript.$$
	rm -f gpg_transcript.$$
  	exit 8
	fi

rm -f gpg_transcript.$$

ftp_vendor $ftp_host $outfile $outfile "cd inbound" 

echo -e "\nRemove archived files older than $FileAge days"
find $outbound_archive/* -mtime +$FileAge -print |
	while read FILE1
	do
	echo "removing file $FILE1"
	rm -f $FILE1
	done

echo -e "\nRemove temp files"
rm -f $data_file $hcmdir_out/$data_file $hcmdir_out/$tagfile $outfile

}

function inproc {

cd $inbound_dir

ftp_vendor_get $ftp_host $pgp_infile $pgp_infile "cd outbound" 

echo $PGPPASS | gpg --passphrase-fd 0 --batch -v --output $local_file --decrypt $pgp_infile >gpg_transcript.$$

	result=$?

	if [ $result -ne 0 -o ! -f $local_file ]; then
	echo -e "\nschwab data file encryption failure, contact Production Services.\n"
	cat gpg_transcript.$$
	rm -f gpg_transcript.$$
  	exit 8
	fi

rm -f gpg_transcript.$$

securezip $local_file inbound

echo -e "\nArchive  $pgp_infile on Schwab server" 
	ftp -v $ftp_host <<GETDATA >ftp_results.$$ 2>&1
        cd "outbound/Archive"
       	put $pgp_infile $pgp_infile.$datestamp_rem
	cd ..
        delete $pgp_infile
	quit
GETDATA

	result=$?

	if [ $result -ne 0 ]; then
	echo =e "\narchiving file $pgp_infile on $ftp_host failed\n"
	cat ftp_results.$$
	rm -fv ftp_results.$$
	exit 4
	fi

cat ftp_results.$$
rm -fv ftp_results.$$

echo -e "\nMove $local_file to $hcmdir_in"
mv $local_file $hcmdir_in
touch $hcmdir_in/$local_tagfile

	result=$?

	if [ $result -ne 0 -o -f $local_file ]; then
	echo -e "\nMove $localfile to $hcmdir_in failed, contact Production Services.\n"
  	exit 8
	fi

rm -f $local_file $pgp_infile

}
