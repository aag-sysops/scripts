#!/bin/bash

set -x 

# Set up the emirates data transfer environment
# This script is used by other scripts to preset values from a common source.
# Usage: (in another script) ". $HOME/bin/emirates_environment"

export PGPPASS=seavvdmzftp
export pgp_remote_signature="AS2EK"
export sftp_host=as@crisekftp.emirates.com
export lz=mpprod
export ftp_local_host=asprodftp
export inbound_dir=$HOME/inbound
export inbound_archive=${inbound_dir}.archive
export outbound_dir=$HOME/outbound
export outbound_archive=${outbound_dir}.archive
export alert_recipient=joanne.gies@alaskaair.com
export datestamp1=`/bin/date +%b%d%Y.%H%M`
export datestamp=`/bin/date +%y%m%d`
export nofiledate=`/bin/date "+%A, %D"`
export emirates_MAILLIST="dean.liebrich@alaskaair.com"
export FileAge=30

. /opt/local/ops_scripts/function_lib

function inbound {

cd $inbound_dir

#ftp_vendor_chk_ff $sftp_host

echo -e "\nget file on Emirates server" 
	sftp -v $sftp_host <<GETDATA >ftp_results.$$ 2>&1
        cd "ek2as"
       	get $data_file
        quit
GETDATA

	result=$?

	if [ $result -ne 0 ]; then
	echo "FTP get of $data_file failed"
	cat ftp_results.$$
	rm ftp_results.$$
	exit 4
	fi

cat ftp_results.$$
rm -fv ftp_results.$$

export filecnt=`ls -1 | grep -c $data_file`

	if [ $filecnt -lt 1 ]; then
echo -e "\nThere was no $data_file to retrieve, please try again later then if still no good contact Jen Fearing\n"
	exit 4
	fi

records=`wc $data_file | awk '{print $2}'`

	if [ $records -eq 0 ]; then
	export MSG="Alaska Airlines received an empty Mileage Plan file $data_file for $nofiledate".
	echo -e "\n$MSG\n"
	echo $MSG | Mail -s "Alaska Airlines empty emirates Mileage Plan file" $emirates_MAILLIST
	mv $local_file $inbound_archive/$local_file.MT.$datestamp
	exit 0
	fi

cp $data_file $local_file

echo -e "\n$local_file file ($records records) received at `date`"

securezip $local_file inbound

ftp_check $ftp_local_host
ftp_solar_in $ftp_local_host $local_file

echo -e "\nrename file on Emirates server" 
	sftp -v -o StrictHostKeyChecking=no $sftp_host <<RENMDATA >ftp_results.$$ 2>&1
        cd "ek2as"
       	rename ASTRFOUT.txt  ASTRFOUT.txt.$datestamp.done
        ls -l
        quit
RENMDATA

echo -e "\ncleaning up inbound directory"
rm -f $local_file ASTRFOUT.txt ftp_results*

archive_clean $inbound_archive $local_file $FileAge

}

function inboundbill {

cd $inbound_dir

echo -e "\nget file on Emirates server" 
	sftp -v $sftp_host <<GETDATA >ftp_results.$$ 2>&1
        cd "ek2as"
       	get $data_file
        quit
GETDATA

cat ftp_results.$$
rm -f ftp_results.$$

records=`wc $data_file | awk '{print $2}'`

	if [ $records -eq 0 ]; then
	export MSG="Alaska Airlines received an empty Mileage Plan file $data_file for $nofiledate".
	echo -e "\n$MSG\n"
	echo $MSG | Mail -s "Alaska Airlines empty emirates Mileage Plan file" $emirates_MAILLIST
	mv $local_file $inbound_archive/$local_file.MT.$datestamp
	exit 0
	fi

cp $data_file $local_file

echo -e "\n$local_file file ($records records) received at `date`"

securezip $local_file inbound

echo "put the $local_file file to asprodftp" 
ftp -v $ftp_local_host <<PUTDATA >ftp_results.$$
  ascii
  cd "mplan\balancing\Emirates_Detail"
  put $local_file $local_file
  bye
PUTDATA

succftp=`grep -c "Transfer complete" ftp_results.$$`

	if [ $succftp -eq 1 ]; then
	echo "ftp of $local_file successful"
	rm -f ftp_results.$$
	fi

echo -e "\n$local_file file ($records records) received at `date`"

#echo -e "\nrename file on Emirates server" 
#	sftp -v -o StrictHostKeyChecking=no $sftp_host <<RENMDATA >ftp_results.$$ 2>&1
#        cd "ek2as"
#       	rename $data_file  $data_file.$datestamp.done
#        ls -l
#        quit
#RENMDATA

echo -e "\nrename file on Emirates server" 
	sftp -v $sftp_host <<RENMDATA >ftp_results.$$ 2>&1
        cd "ek2as"
       	rename $data_file  $data_file.$datestamp.done
        ls -l
        quit
RENMDATA

echo -e "\ncleaning up inbound directory"
rm -fv $local_file $pgp_data_file $data_file

archive_clean $inbound_archive $local_file $FileAge

}

function outbound {

cd $outbound_dir

mv $out_data_file $out_data_date_file

echo $PGPPASS | gpg --passphrase-fd 0 --batch -v -r "$pgp_remote_signature" --output $out_pgp_file --encrypt $out_data_date_file >pgp_transcript.$$
	
	result=$?

	if [ ! -s $out_pgp_file -o $result -ne 0 ]; then
	echo -e "\n$out_data_date_file encryption failure, contact Production Analyst" 
	cat pgp_transcript.$$
	rm pgp_transcript.$$
	exit 4
	fi

echo -e "\nput file on Emirates server" 
	sftp -v $sftp_host <<PUTDATA >ftp_results.$$ 2>&1
        cd "as2ek"
       	put $out_pgp_file
        dir
       quit
PUTDATA

securezip $out_data_date_file outbound

echo -e "\nremove local files in outbound"
rm -fv $out_pgp_file $tag_file $out_data_date_file pgp_transcript.$$ ftp*

archive_clean $outbound_archive $out_data_file $FileAge

}

function outboundbill {

cd $outbound_dir

echo -e "\nget $kebill_file from asprodftp" 
	ftp -v asprodftp <<GETDATA >ftp_results.$$
	cd "mpprod/Outbound/EK_Billing"
        dir
	mget ASACFIN*
	bye
GETDATA

	result=$?
	
	if [ $result -ne 0 ]; then
	echo "ftp get of $kebill_file failed"
	cat ftp_results.$$
	exit 4 
	fi

rm -f ftp_results.$$

export out_data_file=`ls -1 ASACFIN*`
echo -e "\nprocessing outbound file $out_data_file"
export out_pgp_file=${out_data_file}.pgp 

echo $PGPPASS | gpg --passphrase-fd 0 --batch -v -r "$pgp_remote_signature" --output $out_pgp_file --encrypt $out_data_file >pgp_transcript.$$
	
	result=$?

	if [ ! -s $out_pgp_file -o $result -ne 0 ]; then
	echo -e "\n$out_data_date_file encryption failure, contact Systems Management" 
	cat pgp_transcript.$$
	rm pgp_transcript.$$
	exit 4
	fi

echo out_pgp_file  $out_pgp_file

echo -e "\nput file on Emirates server" 
	sftp -v $sftp_host <<PUTDATA >ftp_results.$$ 2>&1
        cd "as2ek"
       	put $out_pgp_file
        dir
        quit
PUTDATA

securezip $out_data_file outbound

echo -e "\nArchive file on $ftp_local_host" 
	ftp -v -i $ftp_local_host <<GETDATA >ftp_results.$$ 2>&1
        cd "mpprod\Outbound\EK_Billing\Archive"
        put $out_data_file
        cd ..
        del $out_data_file
        quit
GETDATA

	result=$?
	if [ $result -ne 0 ]; then
	echo -e "\narchive of file $out_data_file on $ftp_local_host failed.\n"
	cat ftp_results.$$
	rm -fv ftp_results.$$
	exit 4
	fi

cat ftp_results.$$
#rm -fv ftp_results.$$

echo -e "\nremove local files in outbound"
rm -f $out_pgp_file $tag_file $out_data_file pgp_transcript.$$ 

archive_clean $outbound_archive $out_data_file $FileAge

}
