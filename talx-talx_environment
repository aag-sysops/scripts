#!/bin/bash

# Set up the Talx data transfer environment
# This script is used by other scripts to preset values from a common source.
# Usage: (in another script) ". $HOME/bin/talx_environment"

export PGPPASS=seavvdmzftp
#export pgp_remote_signature="equifaxws07202016"
export pgp_remote_signature="equifaxws01182017"
export ftp_host=ftp.talx.com
export datestamp=`/bin/date +%b%d%Y.%H%M`
export i90datestamp=`/bin/date +%m%d%Y`
export ni90datestamp=`/bin/date +%Y%m%d`
export filedate=`/bin/date +%Y%m%d`
export outbound_dir=$HOME/outbound
export outbound_archive=${outbound_dir}.archive
export inbound_dir=$HOME/inbound
export inbound_archive=${inbound_dir}.archive
#export hcmdir=/ftptest/HCMTEST/outbound/astalx 
export ashcmdir=/home/hcmprod/outbound/astalx 
export qxhcmdir=/home/hcmprod/outbound/qxtalx
export alert_recipient=dean.liebrich@alaskaair.com
export talx_mailto="joanne.gies@alaskaair.com"
export debug_to="dean.liebrich@alaskaair.com,joanne.gies@alaskaair.com"
export info_to="dean.liebrich@alaskaair.com,joanne.gies@alaskaair.com"
export logfile=$HOME/transfer_log
export astagfile=astalx.tag
export FileAge=20

. /opt/local/ops_scripts/function_lib

function mainproc { 

cd $outbound_dir

cp $hcmdir/$datafile $outbound_dir

	result=$?

        if [ $result -ne 0 ]; then
        echo -e "\nget $datafile from $hcmdir failed"
	echo "contents of $hcmdir:"
	ls -l $hcmdir
        exit 4
        fi

echo -e "\nbegin processing for $datafile file"

echo -e "\nencrypting file $datafile"
echo $PGPPASS | gpg --passphrase-fd 0 --batch -v --armor -r "$pgp_remote_signature" --output $pgpfile --encrypt $datafile >pgp_transcript.$$
	
	result=$?

	if [ ! -s $pgpfile -o $result -ne 0 ]; then
	echo -e "\n$datafile encryption failure, contact Production Analyst" 
	cat pgp_transcript.$$
	rm pgp_transcript.$$
	exit 4
	fi

rm -f pgp_transcript.$$

ftp_vendor $ftp_host $pgpfile $pgpfile bin

securezip $datafile outbound

rm -f $datafile $pgpfile $tagfile $hcmdir/$datafile $hcmdir/$tagfile 

echo -e "\nremove files older than $FileAge days from $outbound_archive"
cd $outbound_archive
	find *$archivefile -mtime +$FileAge -print |
	while read FILE1
	do
	echo "removing file $FILE1"
	rm -f $FILE1
	done
 
}

