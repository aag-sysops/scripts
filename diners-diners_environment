#!/bin/bash

# Set up the diners data transfer environment
# This script is used by other scripts to preset values from a common source.
# Usage: (in another script) ". $HOME/bin/diners_environment"

export PGPPASS=seavvdmzftp
export pgp_remote_signature="BMO CRDS"
#export ftp_host=(not needed - they come pick up the file).
export ftp_local_host=asprodftp
export lz=mpprod
export inbound_dir=$HOME/inbound
export inbound_archive=${inbound_dir}.archive
export outbound_dir=$HOME/outbound
export outbound_archive=${outbound_dir}.archive
export alert_recipient=eps@alaskaair.com
export nofiledate=`/bin/date "+%A, %D"`
export local_file=DCDINERSCLUBPIT.txt
export outfile_prefix=DCDINERSCLUBPIT
#export mail_to="joanne.gies@alaskaair.com"
FileAge=30

. /opt/local/ops_scripts/function_lib

function inbound {

cd $inbound_dir

data_pgp_file=`ls -1 BMO-ALASKAAIR.TSY*.gpg`                     

echo $data_pgp_file

echo -e "decrypt $data_pgp_file"
echo $PGPPASS | gpg --passphrase-fd 0 --batch --output $local_file --decrypt $data_pgp_file    
	result=$?

	if [ $result -ne 0 ]; then
	echo "${program}: inbound results file decrypt problem.  Call Ops Analyst."
        exit 8
	fi

records=`wc $local_file | awk '{print $2}'`

	if [ $records -eq 0 ]; then
	export MSG="diners data file for date $rundate is empty."
	echo -e "\n$MSG\n"
	echo $MSG | Mail -s "diners Mileage Plan data" $MAILLIST
	mv $local_file $inbound_archive/$local_file.MT.$datestamp
	exit 0
	fi

echo -e "\n$local_file file ($records records) received at `date`"

securezip $local_file inbound

ftp_check $ftp_local_host
ftp_solar_in $ftp_local_host $local_file

echo -e "\ncleaning up inbound directory"
rm -f $local_file $data_pgp_file

archive_clean $inbound_archive $local_file $FileAge

}

function outbound {

cd $outbound_dir

ftp_check $ftp_local_host
ftp_solar_out $ftp_local_host $outfile_prefix

ls -1 $outfile_prefix* | while read FILE1
	do

export datestamp=`/bin/date +%Y%m%d%H%M`
export out_pgp_file=ALASKAAIR-BMO.TSY507.${datestamp}_AS.TXT.gpg
export solar_file=$FILE1
echo -e "\nprocessing outbound file $solar_file"

securezip $solar_file outbound

echo -e "\nencrypt $solar_file (output to $out_pgp_file)"
echo $PGPPASS | gpg --passphrase-fd 0 --batch -v -r "$pgp_remote_signature" --output $out_pgp_file --encrypt $solar_file >pgp_transcript.$$
	
	result=$?

	if [ ! -s $out_pgp_file -o $result -ne 0 ]; then
	echo -e "\n$solar_file encryption failure, contact Production Analyst" 
	cat pgp_transcript.$$
	rm pgp_transcript.$$
	exit 4
	fi

ftp_delete $ftp_local_host $solar_file "cd mpprod/outbound/handback"

echo -e "remove local files in outbound"
rm $solar_file pgp*

#echo -e "\nemail to diners that the handback file $out_pgp_file is ready, please delete after pickup"
#Mail -s "Hello - Handback file $out_pgp_file is now on our server, please delete after picking up" $mail_to </dev/null

	done

}
