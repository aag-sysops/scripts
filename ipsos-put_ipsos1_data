#!/bin/sh

. $HOME/bin/ipsos_environment

#--------------------------------------------------------------------------
# This script goes out to seavvfile1\ftpprod\mplan\ipsos and pulls in a file to place on the Linux server.
# It is then encrypted then sent to IPSOS  
#--------------------------------------------------------------------------

cd $outbound_dir

# check for existence of file on Seavvfile1
echo -e "\ncheck for exisiting file on asprodftp" 
	ftp -v asprodftp <<GETDATA >ftp_results.$$ 2>&1
        cd mplan/ipsos
	dir
        quit
GETDATA

data_ready=`grep -c -e "alaska_survey.csv" ftp_results.$$`

	if [ $data_ready -eq 0 ]; then
	cat ftp_results.$$
	rm -f ftp_results.$$
	MSG="The alaska_survey.csv is not in the Ipsos directory on Seavvfile1."
	echo $MSG
	echo $MSG | Mail -s "IPSOS" $MAILLIST1
	exit 0
	fi

#rm -f ftp_results.$$

#get the file
echo -e "\nget $data file from asprodftp" 
	ftp -v asprodftp <<GETDATA >ftp_results.$$
	cd "mplan\IPSOS"
	get $data_file
	bye
GETDATA

result=$?

if [ $result -ne 0 ]; then
echo "ftp get of $data_file failed"
cat ftp_results.$$
exit 4 
fi

rm -f ftp_results.$$

# Encrypt the file with recipients signature
# Note that the variable $gpg_secret MUST be exported and contain our
# passphrase in order to have the encryption work in non-interactive mode
echo -e "\nencrypt $data_file"

echo $PGPPASS | gpg --passphrase-fd 0 --batch -v --armor --sign -r "Veronica Gunta" -o $pgp_data_file --encrypt $data_file >pgp_transcript.$$ 2>&1
	result=$?

	if [ $result -ne 0 ]; then
echo -e "\n$data_file encryption failure, contact EPS\n"
	cat pgp_transcript.$$
	exit 8
	fi

rm -f pgp_transcript.$$

ftpipsos

#Move the file
echo -e "\nmove $data file on asprodftp" 
	ftp -v asprodftp <<GETDATA >ftp_results.$$
	cd "mplan\IPSOS"
	ren  $data_file ../Processed/$data_file.$outdate
	bye
GETDATA

echo -e "\ncreate archived version of handback file"
gzip <$data_file >$outbound_archive/$data_file.$datestamp.gz

output_records=`wc -l $pgp_data_file`
echo -e "\n$datestamp: $output_records data records sent" >>$logfile

echo -e "\nclean up outbound directory"
rm -f ftp_results.$$ $pgp_data $tag_file
